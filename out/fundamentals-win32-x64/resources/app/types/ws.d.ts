export = index;
declare class index {
    static CLOSED: number;
    static CLOSING: number;
    static CONNECTING: number;
    static OPEN: number;
    static Receiver(extensions: any, maxPayload: any): void;
    static Sender(socket: any, extensions: any): void;
    static Server(options: any, callback: any): any;
    static buildHostHeader(isSecure: any, hostname: any, port: any): any;
    static connect(address: any, fn: any): any;
    static createConnection(address: any, fn: any): any;
    static createServer(options: any, fn: any): any;
    constructor(address: any, protocols: any, options: any);
    bytesReceived: any;
    readyState: any;
    supports: any;
    extensions: any;
    addEventListener(method: any, listener: any): void;
    addListener(type: any, listener: any): any;
    close(code: any, data: any): void;
    emit(type: any, args: any): any;
    eventNames(): any;
    getMaxListeners(): any;
    listenerCount(type: any): any;
    listeners(type: any): any;
    off(type: any, listener: any): any;
    on(type: any, listener: any): any;
    once(type: any, listener: any): any;
    pause(): any;
    ping(data: any, options: any, dontFailWhenClosed: any): void;
    pong(data: any, options: any, dontFailWhenClosed: any): void;
    prependListener(type: any, listener: any): any;
    prependOnceListener(type: any, listener: any): any;
    rawListeners(type: any): any;
    removeAllListeners(type: any, ...args: any[]): any;
    removeListener(type: any, listener: any): any;
    resume(): any;
    send(data: any, options: any, cb: any): void;
    setMaxListeners(n: any): any;
    stream(options: any, cb: any): void;
    terminate(): void;
}
